package testeSatellites;

/**
 * <p>Titre : Ensemble d'objets permettant de communiquer</p>
 * <p>Description : basÔøΩ sur les sockets....</p>
 * <p>Copyright : Copyright (c) 2003</p>
 * <p>SociÔøΩtÔøΩ : </p>
 * @author FSL,XR,MD
 * @version 1.0
 */

import java.io.*;
import java.net.*;
import java.util.*;

//Classe abstraite dÔøΩfinissant les attributs et les mÔøΩthodes de communication
public abstract class MesSockets {

  //Canal de communication
  protected DatagramSocket tuyau;
  //adresse de la machine destinataire des message
  protected InetAddress adrCorrespondant;
  //identifiant de l'application distante sur la machine destinataire
  protected int portCorrespondant;
  
  protected int MAX_DATA = 51200;
  
  //methode qui permet d'envoyer un fichier
  protected void envoyerFichier(FileInputStream stream) throws IOException {
	  //crÈation du tableau d'octets permettant de stocker le fichier
	  byte[] fileData = new byte[MAX_DATA];
	  //transformation du fichier en flux d'octets
	  stream.read(fileData);
	  //crÈation d'un paquet permettant de stocker le fichier
	  DatagramPacket datagramFile = new DatagramPacket(fileData, fileData.length, adrCorrespondant, portCorrespondant);
	  //l'envoi du paquet dans le canal
	  tuyau.send(datagramFile);
  }
  
  protected void lireFichier(FileOutputStream stream) throws IOException {
	  //crÈation du tableau d'octets permettant de stocker le fichier
	  byte[] fileData = new byte[MAX_DATA];
	  //crÈation du paquet qui va receoir le fichier
	  DatagramPacket receivePacket = new DatagramPacket(fileData, fileData.length);
	  //rÈception du fichier
	  tuyau.receive(receivePacket);
	  //transformation du fichier en flux d'octets
	  stream.write(receivePacket.getData(), 0, receivePacket.getLength());

  }

  //m√©thode qui permet d'envoyer un tableau d'octets sur r√©seau
  //(seules les octets peuvent transiter sur le r√©seau)
  protected void ecrireByte(byte[] donnee) throws IOException {
    //cr√©ation du paquet contenant les donn√©es et l'identifiant du correspondant
    DatagramPacket paquet = new DatagramPacket(donnee, donnee.length, adrCorrespondant, portCorrespondant);
    //envoi du paquet dans le canal
    tuyau.send(paquet);
  }


  //m√©thode qui permet de recevoir un tabvleau d'octets par le r√©seau
  //(seules les octets peuvent transiter sur le r√©seau)
  protected byte[] lireByte() throws IOException {
    //cr√©ation du tableau d'octet permettant de stocker les donn√©es
    byte[] donnee= new byte[this.MAX_DATA];
    //cr√©ation du paquet permettant de stocker le message
    DatagramPacket paquet= new DatagramPacket(donnee,donnee.length);
    //r√©ception du message dans le paquet
    tuyau.receive(paquet);
    //r√©cup√©ration de l'adresse de l'√©metteur
    adrCorrespondant = paquet.getAddress();
    //r√©cup√©ration de l'identifiant de l'application sur la machine destinataire
    portCorrespondant = paquet.getPort();
    //cr√©ation d'un tableau √† la taille des donn√©es r√©cup√©r√©es
    byte[] resultat=new byte[paquet.getLength()];
    //recopie des donn√©es dans le tableau
    for (int i=0;i<resultat.length;i++){
      resultat[i]=donnee[i];
    }
    return resultat;
  }


  //m√©thode permettant d'envoyer une chaine de caract√®res
  public void ecrireChaine(String message) throws IOException {
    ecrireByte(message.getBytes());
  }

  
  //m√©thode permettant de recevoir une chaine de caract√®res
  public String lireChaine() throws IOException {
    return new String(lireByte());
  }


  //m√©thode permettant d'envoyer un entier
  public void ecrireEntier(int message) throws IOException {
    //transformation de l'entier sous forme de chaine de caract√®re
    ecrireChaine(Integer.toString(message));
  }

  //m√©thode permettant de recevoir un entier
  public int lireEntier() throws IOException {
    //transformation de l'entier sous forme de chaine de caract√®re
    return Integer.parseInt(lireChaine());
  }
  //permet de liberer le canal lors de la destruction de l'objet
  protected void finalize() throws Throwable{
    tuyau.close();
    super.finalize();
  }

}
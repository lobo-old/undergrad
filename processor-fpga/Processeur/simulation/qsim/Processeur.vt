// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "01/13/2016 10:34:12"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    SCOMP2
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module SCOMP2_vlg_sample_tst(
	clock,
	entree_Port,
	reset,
	sampler_tx
);
input  clock;
input [15:0] entree_Port;
input  reset;
output sampler_tx;

reg sample;
time current_time;
always @(clock or entree_Port or reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module SCOMP2_vlg_check_tst (
	instruction_register_out,
	memory_address_register_out,
	memory_data_register_out,
	memory_write_out,
	program_counter_out,
	register_AC_out,
	sortie_Port_out,
	sampler_rx
);
input [15:0] instruction_register_out;
input [7:0] memory_address_register_out;
input [15:0] memory_data_register_out;
input  memory_write_out;
input [7:0] program_counter_out;
input [15:0] register_AC_out;
input [15:0] sortie_Port_out;
input sampler_rx;

reg [15:0] instruction_register_out_expected;
reg [7:0] memory_address_register_out_expected;
reg [15:0] memory_data_register_out_expected;
reg  memory_write_out_expected;
reg [7:0] program_counter_out_expected;
reg [15:0] register_AC_out_expected;
reg [15:0] sortie_Port_out_expected;

reg [15:0] instruction_register_out_prev;
reg [7:0] memory_address_register_out_prev;
reg [15:0] memory_data_register_out_prev;
reg  memory_write_out_prev;
reg [7:0] program_counter_out_prev;
reg [15:0] register_AC_out_prev;
reg [15:0] sortie_Port_out_prev;

reg [15:0] instruction_register_out_expected_prev;
reg [7:0] memory_address_register_out_expected_prev;
reg [15:0] memory_data_register_out_expected_prev;
reg [7:0] program_counter_out_expected_prev;
reg [15:0] register_AC_out_expected_prev;
reg [15:0] sortie_Port_out_expected_prev;

reg [15:0] last_instruction_register_out_exp;
reg [7:0] last_memory_address_register_out_exp;
reg [15:0] last_memory_data_register_out_exp;
reg [7:0] last_program_counter_out_exp;
reg [15:0] last_register_AC_out_exp;
reg [15:0] last_sortie_Port_out_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:7] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 7'b1;
end

// update real /o prevs

always @(trigger)
begin
	instruction_register_out_prev = instruction_register_out;
	memory_address_register_out_prev = memory_address_register_out;
	memory_data_register_out_prev = memory_data_register_out;
	memory_write_out_prev = memory_write_out;
	program_counter_out_prev = program_counter_out;
	register_AC_out_prev = register_AC_out;
	sortie_Port_out_prev = sortie_Port_out;
end

// update expected /o prevs

always @(trigger)
begin
	instruction_register_out_expected_prev = instruction_register_out_expected;
	memory_address_register_out_expected_prev = memory_address_register_out_expected;
	memory_data_register_out_expected_prev = memory_data_register_out_expected;
	program_counter_out_expected_prev = program_counter_out_expected;
	register_AC_out_expected_prev = register_AC_out_expected;
	sortie_Port_out_expected_prev = sortie_Port_out_expected;
end



// expected instruction_register_out[15]
initial
begin
	instruction_register_out_expected[15] = 1'bX;
end 

// expected instruction_register_out[14]
initial
begin
	instruction_register_out_expected[14] = 1'bX;
end 

// expected instruction_register_out[13]
initial
begin
	instruction_register_out_expected[13] = 1'bX;
end 

// expected instruction_register_out[12]
initial
begin
	instruction_register_out_expected[12] = 1'bX;
end 

// expected instruction_register_out[11]
initial
begin
	instruction_register_out_expected[11] = 1'bX;
end 

// expected instruction_register_out[10]
initial
begin
	instruction_register_out_expected[10] = 1'bX;
end 

// expected instruction_register_out[9]
initial
begin
	instruction_register_out_expected[9] = 1'bX;
end 

// expected instruction_register_out[8]
initial
begin
	instruction_register_out_expected[8] = 1'bX;
end 

// expected instruction_register_out[7]
initial
begin
	instruction_register_out_expected[7] = 1'bX;
end 

// expected instruction_register_out[6]
initial
begin
	instruction_register_out_expected[6] = 1'bX;
end 

// expected instruction_register_out[5]
initial
begin
	instruction_register_out_expected[5] = 1'bX;
end 

// expected instruction_register_out[4]
initial
begin
	instruction_register_out_expected[4] = 1'bX;
end 

// expected instruction_register_out[3]
initial
begin
	instruction_register_out_expected[3] = 1'bX;
end 

// expected instruction_register_out[2]
initial
begin
	instruction_register_out_expected[2] = 1'bX;
end 

// expected instruction_register_out[1]
initial
begin
	instruction_register_out_expected[1] = 1'bX;
end 

// expected instruction_register_out[0]
initial
begin
	instruction_register_out_expected[0] = 1'bX;
end 

// expected memory_address_register_out[7]
initial
begin
	memory_address_register_out_expected[7] = 1'bX;
end 

// expected memory_address_register_out[6]
initial
begin
	memory_address_register_out_expected[6] = 1'bX;
end 

// expected memory_address_register_out[5]
initial
begin
	memory_address_register_out_expected[5] = 1'bX;
end 

// expected memory_address_register_out[4]
initial
begin
	memory_address_register_out_expected[4] = 1'bX;
end 

// expected memory_address_register_out[3]
initial
begin
	memory_address_register_out_expected[3] = 1'bX;
end 

// expected memory_address_register_out[2]
initial
begin
	memory_address_register_out_expected[2] = 1'bX;
end 

// expected memory_address_register_out[1]
initial
begin
	memory_address_register_out_expected[1] = 1'bX;
end 

// expected memory_address_register_out[0]
initial
begin
	memory_address_register_out_expected[0] = 1'bX;
end 

// expected memory_data_register_out[15]
initial
begin
	memory_data_register_out_expected[15] = 1'bX;
end 

// expected memory_data_register_out[14]
initial
begin
	memory_data_register_out_expected[14] = 1'bX;
end 

// expected memory_data_register_out[13]
initial
begin
	memory_data_register_out_expected[13] = 1'bX;
end 

// expected memory_data_register_out[12]
initial
begin
	memory_data_register_out_expected[12] = 1'bX;
end 

// expected memory_data_register_out[11]
initial
begin
	memory_data_register_out_expected[11] = 1'bX;
end 

// expected memory_data_register_out[10]
initial
begin
	memory_data_register_out_expected[10] = 1'bX;
end 

// expected memory_data_register_out[9]
initial
begin
	memory_data_register_out_expected[9] = 1'bX;
end 

// expected memory_data_register_out[8]
initial
begin
	memory_data_register_out_expected[8] = 1'bX;
end 

// expected memory_data_register_out[7]
initial
begin
	memory_data_register_out_expected[7] = 1'bX;
end 

// expected memory_data_register_out[6]
initial
begin
	memory_data_register_out_expected[6] = 1'bX;
end 

// expected memory_data_register_out[5]
initial
begin
	memory_data_register_out_expected[5] = 1'bX;
end 

// expected memory_data_register_out[4]
initial
begin
	memory_data_register_out_expected[4] = 1'bX;
end 

// expected memory_data_register_out[3]
initial
begin
	memory_data_register_out_expected[3] = 1'bX;
end 

// expected memory_data_register_out[2]
initial
begin
	memory_data_register_out_expected[2] = 1'bX;
end 

// expected memory_data_register_out[1]
initial
begin
	memory_data_register_out_expected[1] = 1'bX;
end 

// expected memory_data_register_out[0]
initial
begin
	memory_data_register_out_expected[0] = 1'bX;
end 

// expected program_counter_out[7]
initial
begin
	program_counter_out_expected[7] = 1'bX;
end 

// expected program_counter_out[6]
initial
begin
	program_counter_out_expected[6] = 1'bX;
end 

// expected program_counter_out[5]
initial
begin
	program_counter_out_expected[5] = 1'bX;
end 

// expected program_counter_out[4]
initial
begin
	program_counter_out_expected[4] = 1'bX;
end 

// expected program_counter_out[3]
initial
begin
	program_counter_out_expected[3] = 1'bX;
end 

// expected program_counter_out[2]
initial
begin
	program_counter_out_expected[2] = 1'bX;
end 

// expected program_counter_out[1]
initial
begin
	program_counter_out_expected[1] = 1'bX;
end 

// expected program_counter_out[0]
initial
begin
	program_counter_out_expected[0] = 1'bX;
end 

// expected register_AC_out[15]
initial
begin
	register_AC_out_expected[15] = 1'bX;
end 

// expected register_AC_out[14]
initial
begin
	register_AC_out_expected[14] = 1'bX;
end 

// expected register_AC_out[13]
initial
begin
	register_AC_out_expected[13] = 1'bX;
end 

// expected register_AC_out[12]
initial
begin
	register_AC_out_expected[12] = 1'bX;
end 

// expected register_AC_out[11]
initial
begin
	register_AC_out_expected[11] = 1'bX;
end 

// expected register_AC_out[10]
initial
begin
	register_AC_out_expected[10] = 1'bX;
end 

// expected register_AC_out[9]
initial
begin
	register_AC_out_expected[9] = 1'bX;
end 

// expected register_AC_out[8]
initial
begin
	register_AC_out_expected[8] = 1'bX;
end 

// expected register_AC_out[7]
initial
begin
	register_AC_out_expected[7] = 1'bX;
end 

// expected register_AC_out[6]
initial
begin
	register_AC_out_expected[6] = 1'bX;
end 

// expected register_AC_out[5]
initial
begin
	register_AC_out_expected[5] = 1'bX;
end 

// expected register_AC_out[4]
initial
begin
	register_AC_out_expected[4] = 1'bX;
end 

// expected register_AC_out[3]
initial
begin
	register_AC_out_expected[3] = 1'bX;
end 

// expected register_AC_out[2]
initial
begin
	register_AC_out_expected[2] = 1'bX;
end 

// expected register_AC_out[1]
initial
begin
	register_AC_out_expected[1] = 1'bX;
end 

// expected register_AC_out[0]
initial
begin
	register_AC_out_expected[0] = 1'bX;
end 
// expected sortie_Port_out[ 15 ]
initial
begin
	sortie_Port_out_expected[15] = 1'bX;
end 
// expected sortie_Port_out[ 14 ]
initial
begin
	sortie_Port_out_expected[14] = 1'bX;
end 
// expected sortie_Port_out[ 13 ]
initial
begin
	sortie_Port_out_expected[13] = 1'bX;
end 
// expected sortie_Port_out[ 12 ]
initial
begin
	sortie_Port_out_expected[12] = 1'bX;
end 
// expected sortie_Port_out[ 11 ]
initial
begin
	sortie_Port_out_expected[11] = 1'bX;
end 
// expected sortie_Port_out[ 10 ]
initial
begin
	sortie_Port_out_expected[10] = 1'bX;
end 
// expected sortie_Port_out[ 9 ]
initial
begin
	sortie_Port_out_expected[9] = 1'bX;
end 
// expected sortie_Port_out[ 8 ]
initial
begin
	sortie_Port_out_expected[8] = 1'bX;
end 
// expected sortie_Port_out[ 7 ]
initial
begin
	sortie_Port_out_expected[7] = 1'bX;
end 
// expected sortie_Port_out[ 6 ]
initial
begin
	sortie_Port_out_expected[6] = 1'bX;
end 
// expected sortie_Port_out[ 5 ]
initial
begin
	sortie_Port_out_expected[5] = 1'bX;
end 
// expected sortie_Port_out[ 4 ]
initial
begin
	sortie_Port_out_expected[4] = 1'bX;
end 
// expected sortie_Port_out[ 3 ]
initial
begin
	sortie_Port_out_expected[3] = 1'bX;
end 
// expected sortie_Port_out[ 2 ]
initial
begin
	sortie_Port_out_expected[2] = 1'bX;
end 
// expected sortie_Port_out[ 1 ]
initial
begin
	sortie_Port_out_expected[1] = 1'bX;
end 
// expected sortie_Port_out[ 0 ]
initial
begin
	sortie_Port_out_expected[0] = 1'bX;
end 
// generate trigger
always @(instruction_register_out_expected or instruction_register_out or memory_address_register_out_expected or memory_address_register_out or memory_data_register_out_expected or memory_data_register_out or memory_write_out_expected or memory_write_out or program_counter_out_expected or program_counter_out or register_AC_out_expected or register_AC_out or sortie_Port_out_expected or sortie_Port_out)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected instruction_register_out = %b | expected memory_address_register_out = %b | expected memory_data_register_out = %b | expected memory_write_out = %b | expected program_counter_out = %b | expected register_AC_out = %b | expected sortie_Port_out = %b | ",instruction_register_out_expected_prev,memory_address_register_out_expected_prev,memory_data_register_out_expected_prev,memory_write_out_expected_prev,program_counter_out_expected_prev,register_AC_out_expected_prev,sortie_Port_out_expected_prev);
	$display("| real instruction_register_out = %b | real memory_address_register_out = %b | real memory_data_register_out = %b | real memory_write_out = %b | real program_counter_out = %b | real register_AC_out = %b | real sortie_Port_out = %b | ",instruction_register_out_prev,memory_address_register_out_prev,memory_data_register_out_prev,memory_write_out_prev,program_counter_out_prev,register_AC_out_prev,sortie_Port_out_prev);
`endif
	if (
		( instruction_register_out_expected_prev[0] !== 1'bx ) && ( instruction_register_out_prev[0] !== instruction_register_out_expected_prev[0] )
		&& ((instruction_register_out_expected_prev[0] !== last_instruction_register_out_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction_register_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_register_out_expected_prev);
		$display ("     Real value = %b", instruction_register_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instruction_register_out_exp[0] = instruction_register_out_expected_prev[0];
	end
	if (
		( instruction_register_out_expected_prev[1] !== 1'bx ) && ( instruction_register_out_prev[1] !== instruction_register_out_expected_prev[1] )
		&& ((instruction_register_out_expected_prev[1] !== last_instruction_register_out_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction_register_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_register_out_expected_prev);
		$display ("     Real value = %b", instruction_register_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instruction_register_out_exp[1] = instruction_register_out_expected_prev[1];
	end
	if (
		( instruction_register_out_expected_prev[2] !== 1'bx ) && ( instruction_register_out_prev[2] !== instruction_register_out_expected_prev[2] )
		&& ((instruction_register_out_expected_prev[2] !== last_instruction_register_out_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction_register_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_register_out_expected_prev);
		$display ("     Real value = %b", instruction_register_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instruction_register_out_exp[2] = instruction_register_out_expected_prev[2];
	end
	if (
		( instruction_register_out_expected_prev[3] !== 1'bx ) && ( instruction_register_out_prev[3] !== instruction_register_out_expected_prev[3] )
		&& ((instruction_register_out_expected_prev[3] !== last_instruction_register_out_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction_register_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_register_out_expected_prev);
		$display ("     Real value = %b", instruction_register_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instruction_register_out_exp[3] = instruction_register_out_expected_prev[3];
	end
	if (
		( instruction_register_out_expected_prev[4] !== 1'bx ) && ( instruction_register_out_prev[4] !== instruction_register_out_expected_prev[4] )
		&& ((instruction_register_out_expected_prev[4] !== last_instruction_register_out_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction_register_out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_register_out_expected_prev);
		$display ("     Real value = %b", instruction_register_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instruction_register_out_exp[4] = instruction_register_out_expected_prev[4];
	end
	if (
		( instruction_register_out_expected_prev[5] !== 1'bx ) && ( instruction_register_out_prev[5] !== instruction_register_out_expected_prev[5] )
		&& ((instruction_register_out_expected_prev[5] !== last_instruction_register_out_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction_register_out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_register_out_expected_prev);
		$display ("     Real value = %b", instruction_register_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instruction_register_out_exp[5] = instruction_register_out_expected_prev[5];
	end
	if (
		( instruction_register_out_expected_prev[6] !== 1'bx ) && ( instruction_register_out_prev[6] !== instruction_register_out_expected_prev[6] )
		&& ((instruction_register_out_expected_prev[6] !== last_instruction_register_out_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction_register_out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_register_out_expected_prev);
		$display ("     Real value = %b", instruction_register_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instruction_register_out_exp[6] = instruction_register_out_expected_prev[6];
	end
	if (
		( instruction_register_out_expected_prev[7] !== 1'bx ) && ( instruction_register_out_prev[7] !== instruction_register_out_expected_prev[7] )
		&& ((instruction_register_out_expected_prev[7] !== last_instruction_register_out_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction_register_out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_register_out_expected_prev);
		$display ("     Real value = %b", instruction_register_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instruction_register_out_exp[7] = instruction_register_out_expected_prev[7];
	end
	if (
		( instruction_register_out_expected_prev[8] !== 1'bx ) && ( instruction_register_out_prev[8] !== instruction_register_out_expected_prev[8] )
		&& ((instruction_register_out_expected_prev[8] !== last_instruction_register_out_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction_register_out[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_register_out_expected_prev);
		$display ("     Real value = %b", instruction_register_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instruction_register_out_exp[8] = instruction_register_out_expected_prev[8];
	end
	if (
		( instruction_register_out_expected_prev[9] !== 1'bx ) && ( instruction_register_out_prev[9] !== instruction_register_out_expected_prev[9] )
		&& ((instruction_register_out_expected_prev[9] !== last_instruction_register_out_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction_register_out[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_register_out_expected_prev);
		$display ("     Real value = %b", instruction_register_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instruction_register_out_exp[9] = instruction_register_out_expected_prev[9];
	end
	if (
		( instruction_register_out_expected_prev[10] !== 1'bx ) && ( instruction_register_out_prev[10] !== instruction_register_out_expected_prev[10] )
		&& ((instruction_register_out_expected_prev[10] !== last_instruction_register_out_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction_register_out[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_register_out_expected_prev);
		$display ("     Real value = %b", instruction_register_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instruction_register_out_exp[10] = instruction_register_out_expected_prev[10];
	end
	if (
		( instruction_register_out_expected_prev[11] !== 1'bx ) && ( instruction_register_out_prev[11] !== instruction_register_out_expected_prev[11] )
		&& ((instruction_register_out_expected_prev[11] !== last_instruction_register_out_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction_register_out[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_register_out_expected_prev);
		$display ("     Real value = %b", instruction_register_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instruction_register_out_exp[11] = instruction_register_out_expected_prev[11];
	end
	if (
		( instruction_register_out_expected_prev[12] !== 1'bx ) && ( instruction_register_out_prev[12] !== instruction_register_out_expected_prev[12] )
		&& ((instruction_register_out_expected_prev[12] !== last_instruction_register_out_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction_register_out[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_register_out_expected_prev);
		$display ("     Real value = %b", instruction_register_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instruction_register_out_exp[12] = instruction_register_out_expected_prev[12];
	end
	if (
		( instruction_register_out_expected_prev[13] !== 1'bx ) && ( instruction_register_out_prev[13] !== instruction_register_out_expected_prev[13] )
		&& ((instruction_register_out_expected_prev[13] !== last_instruction_register_out_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction_register_out[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_register_out_expected_prev);
		$display ("     Real value = %b", instruction_register_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instruction_register_out_exp[13] = instruction_register_out_expected_prev[13];
	end
	if (
		( instruction_register_out_expected_prev[14] !== 1'bx ) && ( instruction_register_out_prev[14] !== instruction_register_out_expected_prev[14] )
		&& ((instruction_register_out_expected_prev[14] !== last_instruction_register_out_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction_register_out[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_register_out_expected_prev);
		$display ("     Real value = %b", instruction_register_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instruction_register_out_exp[14] = instruction_register_out_expected_prev[14];
	end
	if (
		( instruction_register_out_expected_prev[15] !== 1'bx ) && ( instruction_register_out_prev[15] !== instruction_register_out_expected_prev[15] )
		&& ((instruction_register_out_expected_prev[15] !== last_instruction_register_out_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction_register_out[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_register_out_expected_prev);
		$display ("     Real value = %b", instruction_register_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instruction_register_out_exp[15] = instruction_register_out_expected_prev[15];
	end
	if (
		( memory_address_register_out_expected_prev[0] !== 1'bx ) && ( memory_address_register_out_prev[0] !== memory_address_register_out_expected_prev[0] )
		&& ((memory_address_register_out_expected_prev[0] !== last_memory_address_register_out_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port memory_address_register_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", memory_address_register_out_expected_prev);
		$display ("     Real value = %b", memory_address_register_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_memory_address_register_out_exp[0] = memory_address_register_out_expected_prev[0];
	end
	if (
		( memory_address_register_out_expected_prev[1] !== 1'bx ) && ( memory_address_register_out_prev[1] !== memory_address_register_out_expected_prev[1] )
		&& ((memory_address_register_out_expected_prev[1] !== last_memory_address_register_out_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port memory_address_register_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", memory_address_register_out_expected_prev);
		$display ("     Real value = %b", memory_address_register_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_memory_address_register_out_exp[1] = memory_address_register_out_expected_prev[1];
	end
	if (
		( memory_address_register_out_expected_prev[2] !== 1'bx ) && ( memory_address_register_out_prev[2] !== memory_address_register_out_expected_prev[2] )
		&& ((memory_address_register_out_expected_prev[2] !== last_memory_address_register_out_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port memory_address_register_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", memory_address_register_out_expected_prev);
		$display ("     Real value = %b", memory_address_register_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_memory_address_register_out_exp[2] = memory_address_register_out_expected_prev[2];
	end
	if (
		( memory_address_register_out_expected_prev[3] !== 1'bx ) && ( memory_address_register_out_prev[3] !== memory_address_register_out_expected_prev[3] )
		&& ((memory_address_register_out_expected_prev[3] !== last_memory_address_register_out_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port memory_address_register_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", memory_address_register_out_expected_prev);
		$display ("     Real value = %b", memory_address_register_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_memory_address_register_out_exp[3] = memory_address_register_out_expected_prev[3];
	end
	if (
		( memory_address_register_out_expected_prev[4] !== 1'bx ) && ( memory_address_register_out_prev[4] !== memory_address_register_out_expected_prev[4] )
		&& ((memory_address_register_out_expected_prev[4] !== last_memory_address_register_out_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port memory_address_register_out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", memory_address_register_out_expected_prev);
		$display ("     Real value = %b", memory_address_register_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_memory_address_register_out_exp[4] = memory_address_register_out_expected_prev[4];
	end
	if (
		( memory_address_register_out_expected_prev[5] !== 1'bx ) && ( memory_address_register_out_prev[5] !== memory_address_register_out_expected_prev[5] )
		&& ((memory_address_register_out_expected_prev[5] !== last_memory_address_register_out_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port memory_address_register_out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", memory_address_register_out_expected_prev);
		$display ("     Real value = %b", memory_address_register_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_memory_address_register_out_exp[5] = memory_address_register_out_expected_prev[5];
	end
	if (
		( memory_address_register_out_expected_prev[6] !== 1'bx ) && ( memory_address_register_out_prev[6] !== memory_address_register_out_expected_prev[6] )
		&& ((memory_address_register_out_expected_prev[6] !== last_memory_address_register_out_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port memory_address_register_out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", memory_address_register_out_expected_prev);
		$display ("     Real value = %b", memory_address_register_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_memory_address_register_out_exp[6] = memory_address_register_out_expected_prev[6];
	end
	if (
		( memory_address_register_out_expected_prev[7] !== 1'bx ) && ( memory_address_register_out_prev[7] !== memory_address_register_out_expected_prev[7] )
		&& ((memory_address_register_out_expected_prev[7] !== last_memory_address_register_out_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port memory_address_register_out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", memory_address_register_out_expected_prev);
		$display ("     Real value = %b", memory_address_register_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_memory_address_register_out_exp[7] = memory_address_register_out_expected_prev[7];
	end
	if (
		( memory_data_register_out_expected_prev[0] !== 1'bx ) && ( memory_data_register_out_prev[0] !== memory_data_register_out_expected_prev[0] )
		&& ((memory_data_register_out_expected_prev[0] !== last_memory_data_register_out_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port memory_data_register_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", memory_data_register_out_expected_prev);
		$display ("     Real value = %b", memory_data_register_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_memory_data_register_out_exp[0] = memory_data_register_out_expected_prev[0];
	end
	if (
		( memory_data_register_out_expected_prev[1] !== 1'bx ) && ( memory_data_register_out_prev[1] !== memory_data_register_out_expected_prev[1] )
		&& ((memory_data_register_out_expected_prev[1] !== last_memory_data_register_out_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port memory_data_register_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", memory_data_register_out_expected_prev);
		$display ("     Real value = %b", memory_data_register_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_memory_data_register_out_exp[1] = memory_data_register_out_expected_prev[1];
	end
	if (
		( memory_data_register_out_expected_prev[2] !== 1'bx ) && ( memory_data_register_out_prev[2] !== memory_data_register_out_expected_prev[2] )
		&& ((memory_data_register_out_expected_prev[2] !== last_memory_data_register_out_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port memory_data_register_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", memory_data_register_out_expected_prev);
		$display ("     Real value = %b", memory_data_register_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_memory_data_register_out_exp[2] = memory_data_register_out_expected_prev[2];
	end
	if (
		( memory_data_register_out_expected_prev[3] !== 1'bx ) && ( memory_data_register_out_prev[3] !== memory_data_register_out_expected_prev[3] )
		&& ((memory_data_register_out_expected_prev[3] !== last_memory_data_register_out_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port memory_data_register_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", memory_data_register_out_expected_prev);
		$display ("     Real value = %b", memory_data_register_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_memory_data_register_out_exp[3] = memory_data_register_out_expected_prev[3];
	end
	if (
		( memory_data_register_out_expected_prev[4] !== 1'bx ) && ( memory_data_register_out_prev[4] !== memory_data_register_out_expected_prev[4] )
		&& ((memory_data_register_out_expected_prev[4] !== last_memory_data_register_out_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port memory_data_register_out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", memory_data_register_out_expected_prev);
		$display ("     Real value = %b", memory_data_register_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_memory_data_register_out_exp[4] = memory_data_register_out_expected_prev[4];
	end
	if (
		( memory_data_register_out_expected_prev[5] !== 1'bx ) && ( memory_data_register_out_prev[5] !== memory_data_register_out_expected_prev[5] )
		&& ((memory_data_register_out_expected_prev[5] !== last_memory_data_register_out_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port memory_data_register_out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", memory_data_register_out_expected_prev);
		$display ("     Real value = %b", memory_data_register_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_memory_data_register_out_exp[5] = memory_data_register_out_expected_prev[5];
	end
	if (
		( memory_data_register_out_expected_prev[6] !== 1'bx ) && ( memory_data_register_out_prev[6] !== memory_data_register_out_expected_prev[6] )
		&& ((memory_data_register_out_expected_prev[6] !== last_memory_data_register_out_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port memory_data_register_out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", memory_data_register_out_expected_prev);
		$display ("     Real value = %b", memory_data_register_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_memory_data_register_out_exp[6] = memory_data_register_out_expected_prev[6];
	end
	if (
		( memory_data_register_out_expected_prev[7] !== 1'bx ) && ( memory_data_register_out_prev[7] !== memory_data_register_out_expected_prev[7] )
		&& ((memory_data_register_out_expected_prev[7] !== last_memory_data_register_out_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port memory_data_register_out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", memory_data_register_out_expected_prev);
		$display ("     Real value = %b", memory_data_register_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_memory_data_register_out_exp[7] = memory_data_register_out_expected_prev[7];
	end
	if (
		( memory_data_register_out_expected_prev[8] !== 1'bx ) && ( memory_data_register_out_prev[8] !== memory_data_register_out_expected_prev[8] )
		&& ((memory_data_register_out_expected_prev[8] !== last_memory_data_register_out_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port memory_data_register_out[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", memory_data_register_out_expected_prev);
		$display ("     Real value = %b", memory_data_register_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_memory_data_register_out_exp[8] = memory_data_register_out_expected_prev[8];
	end
	if (
		( memory_data_register_out_expected_prev[9] !== 1'bx ) && ( memory_data_register_out_prev[9] !== memory_data_register_out_expected_prev[9] )
		&& ((memory_data_register_out_expected_prev[9] !== last_memory_data_register_out_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port memory_data_register_out[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", memory_data_register_out_expected_prev);
		$display ("     Real value = %b", memory_data_register_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_memory_data_register_out_exp[9] = memory_data_register_out_expected_prev[9];
	end
	if (
		( memory_data_register_out_expected_prev[10] !== 1'bx ) && ( memory_data_register_out_prev[10] !== memory_data_register_out_expected_prev[10] )
		&& ((memory_data_register_out_expected_prev[10] !== last_memory_data_register_out_exp[10]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port memory_data_register_out[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", memory_data_register_out_expected_prev);
		$display ("     Real value = %b", memory_data_register_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_memory_data_register_out_exp[10] = memory_data_register_out_expected_prev[10];
	end
	if (
		( memory_data_register_out_expected_prev[11] !== 1'bx ) && ( memory_data_register_out_prev[11] !== memory_data_register_out_expected_prev[11] )
		&& ((memory_data_register_out_expected_prev[11] !== last_memory_data_register_out_exp[11]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port memory_data_register_out[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", memory_data_register_out_expected_prev);
		$display ("     Real value = %b", memory_data_register_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_memory_data_register_out_exp[11] = memory_data_register_out_expected_prev[11];
	end
	if (
		( memory_data_register_out_expected_prev[12] !== 1'bx ) && ( memory_data_register_out_prev[12] !== memory_data_register_out_expected_prev[12] )
		&& ((memory_data_register_out_expected_prev[12] !== last_memory_data_register_out_exp[12]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port memory_data_register_out[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", memory_data_register_out_expected_prev);
		$display ("     Real value = %b", memory_data_register_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_memory_data_register_out_exp[12] = memory_data_register_out_expected_prev[12];
	end
	if (
		( memory_data_register_out_expected_prev[13] !== 1'bx ) && ( memory_data_register_out_prev[13] !== memory_data_register_out_expected_prev[13] )
		&& ((memory_data_register_out_expected_prev[13] !== last_memory_data_register_out_exp[13]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port memory_data_register_out[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", memory_data_register_out_expected_prev);
		$display ("     Real value = %b", memory_data_register_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_memory_data_register_out_exp[13] = memory_data_register_out_expected_prev[13];
	end
	if (
		( memory_data_register_out_expected_prev[14] !== 1'bx ) && ( memory_data_register_out_prev[14] !== memory_data_register_out_expected_prev[14] )
		&& ((memory_data_register_out_expected_prev[14] !== last_memory_data_register_out_exp[14]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port memory_data_register_out[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", memory_data_register_out_expected_prev);
		$display ("     Real value = %b", memory_data_register_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_memory_data_register_out_exp[14] = memory_data_register_out_expected_prev[14];
	end
	if (
		( memory_data_register_out_expected_prev[15] !== 1'bx ) && ( memory_data_register_out_prev[15] !== memory_data_register_out_expected_prev[15] )
		&& ((memory_data_register_out_expected_prev[15] !== last_memory_data_register_out_exp[15]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port memory_data_register_out[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", memory_data_register_out_expected_prev);
		$display ("     Real value = %b", memory_data_register_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_memory_data_register_out_exp[15] = memory_data_register_out_expected_prev[15];
	end
	if (
		( program_counter_out_expected_prev[0] !== 1'bx ) && ( program_counter_out_prev[0] !== program_counter_out_expected_prev[0] )
		&& ((program_counter_out_expected_prev[0] !== last_program_counter_out_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port program_counter_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", program_counter_out_expected_prev);
		$display ("     Real value = %b", program_counter_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_program_counter_out_exp[0] = program_counter_out_expected_prev[0];
	end
	if (
		( program_counter_out_expected_prev[1] !== 1'bx ) && ( program_counter_out_prev[1] !== program_counter_out_expected_prev[1] )
		&& ((program_counter_out_expected_prev[1] !== last_program_counter_out_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port program_counter_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", program_counter_out_expected_prev);
		$display ("     Real value = %b", program_counter_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_program_counter_out_exp[1] = program_counter_out_expected_prev[1];
	end
	if (
		( program_counter_out_expected_prev[2] !== 1'bx ) && ( program_counter_out_prev[2] !== program_counter_out_expected_prev[2] )
		&& ((program_counter_out_expected_prev[2] !== last_program_counter_out_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port program_counter_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", program_counter_out_expected_prev);
		$display ("     Real value = %b", program_counter_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_program_counter_out_exp[2] = program_counter_out_expected_prev[2];
	end
	if (
		( program_counter_out_expected_prev[3] !== 1'bx ) && ( program_counter_out_prev[3] !== program_counter_out_expected_prev[3] )
		&& ((program_counter_out_expected_prev[3] !== last_program_counter_out_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port program_counter_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", program_counter_out_expected_prev);
		$display ("     Real value = %b", program_counter_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_program_counter_out_exp[3] = program_counter_out_expected_prev[3];
	end
	if (
		( program_counter_out_expected_prev[4] !== 1'bx ) && ( program_counter_out_prev[4] !== program_counter_out_expected_prev[4] )
		&& ((program_counter_out_expected_prev[4] !== last_program_counter_out_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port program_counter_out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", program_counter_out_expected_prev);
		$display ("     Real value = %b", program_counter_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_program_counter_out_exp[4] = program_counter_out_expected_prev[4];
	end
	if (
		( program_counter_out_expected_prev[5] !== 1'bx ) && ( program_counter_out_prev[5] !== program_counter_out_expected_prev[5] )
		&& ((program_counter_out_expected_prev[5] !== last_program_counter_out_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port program_counter_out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", program_counter_out_expected_prev);
		$display ("     Real value = %b", program_counter_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_program_counter_out_exp[5] = program_counter_out_expected_prev[5];
	end
	if (
		( program_counter_out_expected_prev[6] !== 1'bx ) && ( program_counter_out_prev[6] !== program_counter_out_expected_prev[6] )
		&& ((program_counter_out_expected_prev[6] !== last_program_counter_out_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port program_counter_out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", program_counter_out_expected_prev);
		$display ("     Real value = %b", program_counter_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_program_counter_out_exp[6] = program_counter_out_expected_prev[6];
	end
	if (
		( program_counter_out_expected_prev[7] !== 1'bx ) && ( program_counter_out_prev[7] !== program_counter_out_expected_prev[7] )
		&& ((program_counter_out_expected_prev[7] !== last_program_counter_out_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port program_counter_out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", program_counter_out_expected_prev);
		$display ("     Real value = %b", program_counter_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_program_counter_out_exp[7] = program_counter_out_expected_prev[7];
	end
	if (
		( register_AC_out_expected_prev[0] !== 1'bx ) && ( register_AC_out_prev[0] !== register_AC_out_expected_prev[0] )
		&& ((register_AC_out_expected_prev[0] !== last_register_AC_out_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_AC_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_AC_out_expected_prev);
		$display ("     Real value = %b", register_AC_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_register_AC_out_exp[0] = register_AC_out_expected_prev[0];
	end
	if (
		( register_AC_out_expected_prev[1] !== 1'bx ) && ( register_AC_out_prev[1] !== register_AC_out_expected_prev[1] )
		&& ((register_AC_out_expected_prev[1] !== last_register_AC_out_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_AC_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_AC_out_expected_prev);
		$display ("     Real value = %b", register_AC_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_register_AC_out_exp[1] = register_AC_out_expected_prev[1];
	end
	if (
		( register_AC_out_expected_prev[2] !== 1'bx ) && ( register_AC_out_prev[2] !== register_AC_out_expected_prev[2] )
		&& ((register_AC_out_expected_prev[2] !== last_register_AC_out_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_AC_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_AC_out_expected_prev);
		$display ("     Real value = %b", register_AC_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_register_AC_out_exp[2] = register_AC_out_expected_prev[2];
	end
	if (
		( register_AC_out_expected_prev[3] !== 1'bx ) && ( register_AC_out_prev[3] !== register_AC_out_expected_prev[3] )
		&& ((register_AC_out_expected_prev[3] !== last_register_AC_out_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_AC_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_AC_out_expected_prev);
		$display ("     Real value = %b", register_AC_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_register_AC_out_exp[3] = register_AC_out_expected_prev[3];
	end
	if (
		( register_AC_out_expected_prev[4] !== 1'bx ) && ( register_AC_out_prev[4] !== register_AC_out_expected_prev[4] )
		&& ((register_AC_out_expected_prev[4] !== last_register_AC_out_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_AC_out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_AC_out_expected_prev);
		$display ("     Real value = %b", register_AC_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_register_AC_out_exp[4] = register_AC_out_expected_prev[4];
	end
	if (
		( register_AC_out_expected_prev[5] !== 1'bx ) && ( register_AC_out_prev[5] !== register_AC_out_expected_prev[5] )
		&& ((register_AC_out_expected_prev[5] !== last_register_AC_out_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_AC_out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_AC_out_expected_prev);
		$display ("     Real value = %b", register_AC_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_register_AC_out_exp[5] = register_AC_out_expected_prev[5];
	end
	if (
		( register_AC_out_expected_prev[6] !== 1'bx ) && ( register_AC_out_prev[6] !== register_AC_out_expected_prev[6] )
		&& ((register_AC_out_expected_prev[6] !== last_register_AC_out_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_AC_out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_AC_out_expected_prev);
		$display ("     Real value = %b", register_AC_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_register_AC_out_exp[6] = register_AC_out_expected_prev[6];
	end
	if (
		( register_AC_out_expected_prev[7] !== 1'bx ) && ( register_AC_out_prev[7] !== register_AC_out_expected_prev[7] )
		&& ((register_AC_out_expected_prev[7] !== last_register_AC_out_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_AC_out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_AC_out_expected_prev);
		$display ("     Real value = %b", register_AC_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_register_AC_out_exp[7] = register_AC_out_expected_prev[7];
	end
	if (
		( register_AC_out_expected_prev[8] !== 1'bx ) && ( register_AC_out_prev[8] !== register_AC_out_expected_prev[8] )
		&& ((register_AC_out_expected_prev[8] !== last_register_AC_out_exp[8]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_AC_out[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_AC_out_expected_prev);
		$display ("     Real value = %b", register_AC_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_register_AC_out_exp[8] = register_AC_out_expected_prev[8];
	end
	if (
		( register_AC_out_expected_prev[9] !== 1'bx ) && ( register_AC_out_prev[9] !== register_AC_out_expected_prev[9] )
		&& ((register_AC_out_expected_prev[9] !== last_register_AC_out_exp[9]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_AC_out[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_AC_out_expected_prev);
		$display ("     Real value = %b", register_AC_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_register_AC_out_exp[9] = register_AC_out_expected_prev[9];
	end
	if (
		( register_AC_out_expected_prev[10] !== 1'bx ) && ( register_AC_out_prev[10] !== register_AC_out_expected_prev[10] )
		&& ((register_AC_out_expected_prev[10] !== last_register_AC_out_exp[10]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_AC_out[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_AC_out_expected_prev);
		$display ("     Real value = %b", register_AC_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_register_AC_out_exp[10] = register_AC_out_expected_prev[10];
	end
	if (
		( register_AC_out_expected_prev[11] !== 1'bx ) && ( register_AC_out_prev[11] !== register_AC_out_expected_prev[11] )
		&& ((register_AC_out_expected_prev[11] !== last_register_AC_out_exp[11]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_AC_out[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_AC_out_expected_prev);
		$display ("     Real value = %b", register_AC_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_register_AC_out_exp[11] = register_AC_out_expected_prev[11];
	end
	if (
		( register_AC_out_expected_prev[12] !== 1'bx ) && ( register_AC_out_prev[12] !== register_AC_out_expected_prev[12] )
		&& ((register_AC_out_expected_prev[12] !== last_register_AC_out_exp[12]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_AC_out[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_AC_out_expected_prev);
		$display ("     Real value = %b", register_AC_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_register_AC_out_exp[12] = register_AC_out_expected_prev[12];
	end
	if (
		( register_AC_out_expected_prev[13] !== 1'bx ) && ( register_AC_out_prev[13] !== register_AC_out_expected_prev[13] )
		&& ((register_AC_out_expected_prev[13] !== last_register_AC_out_exp[13]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_AC_out[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_AC_out_expected_prev);
		$display ("     Real value = %b", register_AC_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_register_AC_out_exp[13] = register_AC_out_expected_prev[13];
	end
	if (
		( register_AC_out_expected_prev[14] !== 1'bx ) && ( register_AC_out_prev[14] !== register_AC_out_expected_prev[14] )
		&& ((register_AC_out_expected_prev[14] !== last_register_AC_out_exp[14]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_AC_out[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_AC_out_expected_prev);
		$display ("     Real value = %b", register_AC_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_register_AC_out_exp[14] = register_AC_out_expected_prev[14];
	end
	if (
		( register_AC_out_expected_prev[15] !== 1'bx ) && ( register_AC_out_prev[15] !== register_AC_out_expected_prev[15] )
		&& ((register_AC_out_expected_prev[15] !== last_register_AC_out_exp[15]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port register_AC_out[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", register_AC_out_expected_prev);
		$display ("     Real value = %b", register_AC_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_register_AC_out_exp[15] = register_AC_out_expected_prev[15];
	end
	if (
		( sortie_Port_out_expected_prev[0] !== 1'bx ) && ( sortie_Port_out_prev[0] !== sortie_Port_out_expected_prev[0] )
		&& ((sortie_Port_out_expected_prev[0] !== last_sortie_Port_out_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sortie_Port_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sortie_Port_out_expected_prev);
		$display ("     Real value = %b", sortie_Port_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_sortie_Port_out_exp[0] = sortie_Port_out_expected_prev[0];
	end
	if (
		( sortie_Port_out_expected_prev[1] !== 1'bx ) && ( sortie_Port_out_prev[1] !== sortie_Port_out_expected_prev[1] )
		&& ((sortie_Port_out_expected_prev[1] !== last_sortie_Port_out_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sortie_Port_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sortie_Port_out_expected_prev);
		$display ("     Real value = %b", sortie_Port_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_sortie_Port_out_exp[1] = sortie_Port_out_expected_prev[1];
	end
	if (
		( sortie_Port_out_expected_prev[2] !== 1'bx ) && ( sortie_Port_out_prev[2] !== sortie_Port_out_expected_prev[2] )
		&& ((sortie_Port_out_expected_prev[2] !== last_sortie_Port_out_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sortie_Port_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sortie_Port_out_expected_prev);
		$display ("     Real value = %b", sortie_Port_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_sortie_Port_out_exp[2] = sortie_Port_out_expected_prev[2];
	end
	if (
		( sortie_Port_out_expected_prev[3] !== 1'bx ) && ( sortie_Port_out_prev[3] !== sortie_Port_out_expected_prev[3] )
		&& ((sortie_Port_out_expected_prev[3] !== last_sortie_Port_out_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sortie_Port_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sortie_Port_out_expected_prev);
		$display ("     Real value = %b", sortie_Port_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_sortie_Port_out_exp[3] = sortie_Port_out_expected_prev[3];
	end
	if (
		( sortie_Port_out_expected_prev[4] !== 1'bx ) && ( sortie_Port_out_prev[4] !== sortie_Port_out_expected_prev[4] )
		&& ((sortie_Port_out_expected_prev[4] !== last_sortie_Port_out_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sortie_Port_out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sortie_Port_out_expected_prev);
		$display ("     Real value = %b", sortie_Port_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_sortie_Port_out_exp[4] = sortie_Port_out_expected_prev[4];
	end
	if (
		( sortie_Port_out_expected_prev[5] !== 1'bx ) && ( sortie_Port_out_prev[5] !== sortie_Port_out_expected_prev[5] )
		&& ((sortie_Port_out_expected_prev[5] !== last_sortie_Port_out_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sortie_Port_out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sortie_Port_out_expected_prev);
		$display ("     Real value = %b", sortie_Port_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_sortie_Port_out_exp[5] = sortie_Port_out_expected_prev[5];
	end
	if (
		( sortie_Port_out_expected_prev[6] !== 1'bx ) && ( sortie_Port_out_prev[6] !== sortie_Port_out_expected_prev[6] )
		&& ((sortie_Port_out_expected_prev[6] !== last_sortie_Port_out_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sortie_Port_out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sortie_Port_out_expected_prev);
		$display ("     Real value = %b", sortie_Port_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_sortie_Port_out_exp[6] = sortie_Port_out_expected_prev[6];
	end
	if (
		( sortie_Port_out_expected_prev[7] !== 1'bx ) && ( sortie_Port_out_prev[7] !== sortie_Port_out_expected_prev[7] )
		&& ((sortie_Port_out_expected_prev[7] !== last_sortie_Port_out_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sortie_Port_out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sortie_Port_out_expected_prev);
		$display ("     Real value = %b", sortie_Port_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_sortie_Port_out_exp[7] = sortie_Port_out_expected_prev[7];
	end
	if (
		( sortie_Port_out_expected_prev[8] !== 1'bx ) && ( sortie_Port_out_prev[8] !== sortie_Port_out_expected_prev[8] )
		&& ((sortie_Port_out_expected_prev[8] !== last_sortie_Port_out_exp[8]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sortie_Port_out[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sortie_Port_out_expected_prev);
		$display ("     Real value = %b", sortie_Port_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_sortie_Port_out_exp[8] = sortie_Port_out_expected_prev[8];
	end
	if (
		( sortie_Port_out_expected_prev[9] !== 1'bx ) && ( sortie_Port_out_prev[9] !== sortie_Port_out_expected_prev[9] )
		&& ((sortie_Port_out_expected_prev[9] !== last_sortie_Port_out_exp[9]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sortie_Port_out[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sortie_Port_out_expected_prev);
		$display ("     Real value = %b", sortie_Port_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_sortie_Port_out_exp[9] = sortie_Port_out_expected_prev[9];
	end
	if (
		( sortie_Port_out_expected_prev[10] !== 1'bx ) && ( sortie_Port_out_prev[10] !== sortie_Port_out_expected_prev[10] )
		&& ((sortie_Port_out_expected_prev[10] !== last_sortie_Port_out_exp[10]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sortie_Port_out[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sortie_Port_out_expected_prev);
		$display ("     Real value = %b", sortie_Port_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_sortie_Port_out_exp[10] = sortie_Port_out_expected_prev[10];
	end
	if (
		( sortie_Port_out_expected_prev[11] !== 1'bx ) && ( sortie_Port_out_prev[11] !== sortie_Port_out_expected_prev[11] )
		&& ((sortie_Port_out_expected_prev[11] !== last_sortie_Port_out_exp[11]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sortie_Port_out[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sortie_Port_out_expected_prev);
		$display ("     Real value = %b", sortie_Port_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_sortie_Port_out_exp[11] = sortie_Port_out_expected_prev[11];
	end
	if (
		( sortie_Port_out_expected_prev[12] !== 1'bx ) && ( sortie_Port_out_prev[12] !== sortie_Port_out_expected_prev[12] )
		&& ((sortie_Port_out_expected_prev[12] !== last_sortie_Port_out_exp[12]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sortie_Port_out[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sortie_Port_out_expected_prev);
		$display ("     Real value = %b", sortie_Port_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_sortie_Port_out_exp[12] = sortie_Port_out_expected_prev[12];
	end
	if (
		( sortie_Port_out_expected_prev[13] !== 1'bx ) && ( sortie_Port_out_prev[13] !== sortie_Port_out_expected_prev[13] )
		&& ((sortie_Port_out_expected_prev[13] !== last_sortie_Port_out_exp[13]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sortie_Port_out[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sortie_Port_out_expected_prev);
		$display ("     Real value = %b", sortie_Port_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_sortie_Port_out_exp[13] = sortie_Port_out_expected_prev[13];
	end
	if (
		( sortie_Port_out_expected_prev[14] !== 1'bx ) && ( sortie_Port_out_prev[14] !== sortie_Port_out_expected_prev[14] )
		&& ((sortie_Port_out_expected_prev[14] !== last_sortie_Port_out_exp[14]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sortie_Port_out[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sortie_Port_out_expected_prev);
		$display ("     Real value = %b", sortie_Port_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_sortie_Port_out_exp[14] = sortie_Port_out_expected_prev[14];
	end
	if (
		( sortie_Port_out_expected_prev[15] !== 1'bx ) && ( sortie_Port_out_prev[15] !== sortie_Port_out_expected_prev[15] )
		&& ((sortie_Port_out_expected_prev[15] !== last_sortie_Port_out_exp[15]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sortie_Port_out[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sortie_Port_out_expected_prev);
		$display ("     Real value = %b", sortie_Port_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_sortie_Port_out_exp[15] = sortie_Port_out_expected_prev[15];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module SCOMP2_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg [15:0] entree_Port;
reg reset;
// wires                                               
wire [15:0] instruction_register_out;
wire [7:0] memory_address_register_out;
wire [15:0] memory_data_register_out;
wire memory_write_out;
wire [7:0] program_counter_out;
wire [15:0] register_AC_out;
wire [15:0] sortie_Port_out;

wire sampler;                             

// assign statements (if any)                          
SCOMP2 i1 (
// port map - connection between master ports and signals/registers   
	.clock(clock),
	.entree_Port(entree_Port),
	.instruction_register_out(instruction_register_out),
	.memory_address_register_out(memory_address_register_out),
	.memory_data_register_out(memory_data_register_out),
	.memory_write_out(memory_write_out),
	.program_counter_out(program_counter_out),
	.register_AC_out(register_AC_out),
	.reset(reset),
	.sortie_Port_out(sortie_Port_out)
);

// reset
initial
begin
	reset = 1'b1;
	reset = #20000 1'b0;
end 

// clock
initial
begin
	repeat(71)
	begin
		clock = 1'b0;
		clock = #7000 1'b1;
		# 7000;
	end
	clock = 1'b0;
end 
// entree_Port[ 15 ]
initial
begin
	entree_Port[15] = 1'b1;
	entree_Port[15] = #100000 1'b0;
end 
// entree_Port[ 14 ]
initial
begin
	entree_Port[14] = 1'b1;
	entree_Port[14] = #100000 1'b0;
end 
// entree_Port[ 13 ]
initial
begin
	entree_Port[13] = 1'b1;
	entree_Port[13] = #100000 1'b0;
end 
// entree_Port[ 12 ]
initial
begin
	entree_Port[12] = 1'b1;
	entree_Port[12] = #100000 1'b0;
	entree_Port[12] = #260000 1'b1;
	entree_Port[12] = #80000 1'b0;
end 
// entree_Port[ 11 ]
initial
begin
	entree_Port[11] = 1'b1;
	entree_Port[11] = #100000 1'b0;
end 
// entree_Port[ 10 ]
initial
begin
	entree_Port[10] = 1'b1;
	entree_Port[10] = #100000 1'b0;
end 
// entree_Port[ 9 ]
initial
begin
	entree_Port[9] = 1'b1;
	entree_Port[9] = #100000 1'b0;
end 
// entree_Port[ 8 ]
initial
begin
	entree_Port[8] = 1'b1;
	entree_Port[8] = #100000 1'b0;
	entree_Port[8] = #260000 1'b1;
	entree_Port[8] = #80000 1'b0;
end 
// entree_Port[ 7 ]
initial
begin
	entree_Port[7] = 1'b1;
	entree_Port[7] = #100000 1'b0;
end 
// entree_Port[ 6 ]
initial
begin
	entree_Port[6] = 1'b1;
	entree_Port[6] = #100000 1'b0;
end 
// entree_Port[ 5 ]
initial
begin
	entree_Port[5] = 1'b1;
	entree_Port[5] = #100000 1'b0;
end 
// entree_Port[ 4 ]
initial
begin
	entree_Port[4] = 1'b1;
	entree_Port[4] = #100000 1'b0;
	entree_Port[4] = #260000 1'b1;
	entree_Port[4] = #80000 1'b0;
end 
// entree_Port[ 3 ]
initial
begin
	entree_Port[3] = 1'b1;
	entree_Port[3] = #100000 1'b0;
end 
// entree_Port[ 2 ]
initial
begin
	entree_Port[2] = 1'b1;
	entree_Port[2] = #100000 1'b0;
end 
// entree_Port[ 1 ]
initial
begin
	entree_Port[1] = 1'b1;
	entree_Port[1] = #100000 1'b0;
end 
// entree_Port[ 0 ]
initial
begin
	entree_Port[0] = 1'b1;
	entree_Port[0] = #440000 1'b0;
end 

SCOMP2_vlg_sample_tst tb_sample (
	.clock(clock),
	.entree_Port(entree_Port),
	.reset(reset),
	.sampler_tx(sampler)
);

SCOMP2_vlg_check_tst tb_out(
	.instruction_register_out(instruction_register_out),
	.memory_address_register_out(memory_address_register_out),
	.memory_data_register_out(memory_data_register_out),
	.memory_write_out(memory_write_out),
	.program_counter_out(program_counter_out),
	.register_AC_out(register_AC_out),
	.sortie_Port_out(sortie_Port_out),
	.sampler_rx(sampler)
);
endmodule

